// Code generated by ent, DO NOT EDIT.

package ent

import (
	"DonateNotifier/ent/processeddonate"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ProcessedDonate is the model entity for the ProcessedDonate schema.
type ProcessedDonate struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName string `json:"display_name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt int64 `json:"created_at,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount int64 `json:"amount,omitempty"`
	// Currency holds the value of the "currency" field.
	Currency     string `json:"currency,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProcessedDonate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case processeddonate.FieldCreatedAt, processeddonate.FieldAmount:
			values[i] = new(sql.NullInt64)
		case processeddonate.FieldID, processeddonate.FieldDisplayName, processeddonate.FieldCurrency:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProcessedDonate fields.
func (pd *ProcessedDonate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case processeddonate.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pd.ID = value.String
			}
		case processeddonate.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				pd.DisplayName = value.String
			}
		case processeddonate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pd.CreatedAt = value.Int64
			}
		case processeddonate.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				pd.Amount = value.Int64
			}
		case processeddonate.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				pd.Currency = value.String
			}
		default:
			pd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProcessedDonate.
// This includes values selected through modifiers, order, etc.
func (pd *ProcessedDonate) Value(name string) (ent.Value, error) {
	return pd.selectValues.Get(name)
}

// Update returns a builder for updating this ProcessedDonate.
// Note that you need to call ProcessedDonate.Unwrap() before calling this method if this ProcessedDonate
// was returned from a transaction, and the transaction was committed or rolled back.
func (pd *ProcessedDonate) Update() *ProcessedDonateUpdateOne {
	return NewProcessedDonateClient(pd.config).UpdateOne(pd)
}

// Unwrap unwraps the ProcessedDonate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pd *ProcessedDonate) Unwrap() *ProcessedDonate {
	_tx, ok := pd.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProcessedDonate is not a transactional entity")
	}
	pd.config.driver = _tx.drv
	return pd
}

// String implements the fmt.Stringer.
func (pd *ProcessedDonate) String() string {
	var builder strings.Builder
	builder.WriteString("ProcessedDonate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pd.ID))
	builder.WriteString("display_name=")
	builder.WriteString(pd.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", pd.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", pd.Amount))
	builder.WriteString(", ")
	builder.WriteString("currency=")
	builder.WriteString(pd.Currency)
	builder.WriteByte(')')
	return builder.String()
}

// ProcessedDonates is a parsable slice of ProcessedDonate.
type ProcessedDonates []*ProcessedDonate
