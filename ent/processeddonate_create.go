// Code generated by ent, DO NOT EDIT.

package ent

import (
	"DonateNotifier/ent/processeddonate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProcessedDonateCreate is the builder for creating a ProcessedDonate entity.
type ProcessedDonateCreate struct {
	config
	mutation *ProcessedDonateMutation
	hooks    []Hook
}

// SetDisplayName sets the "display_name" field.
func (pdc *ProcessedDonateCreate) SetDisplayName(s string) *ProcessedDonateCreate {
	pdc.mutation.SetDisplayName(s)
	return pdc
}

// SetCreatedAt sets the "created_at" field.
func (pdc *ProcessedDonateCreate) SetCreatedAt(i int64) *ProcessedDonateCreate {
	pdc.mutation.SetCreatedAt(i)
	return pdc
}

// SetAmount sets the "amount" field.
func (pdc *ProcessedDonateCreate) SetAmount(i int64) *ProcessedDonateCreate {
	pdc.mutation.SetAmount(i)
	return pdc
}

// SetCurrency sets the "currency" field.
func (pdc *ProcessedDonateCreate) SetCurrency(s string) *ProcessedDonateCreate {
	pdc.mutation.SetCurrency(s)
	return pdc
}

// SetID sets the "id" field.
func (pdc *ProcessedDonateCreate) SetID(s string) *ProcessedDonateCreate {
	pdc.mutation.SetID(s)
	return pdc
}

// Mutation returns the ProcessedDonateMutation object of the builder.
func (pdc *ProcessedDonateCreate) Mutation() *ProcessedDonateMutation {
	return pdc.mutation
}

// Save creates the ProcessedDonate in the database.
func (pdc *ProcessedDonateCreate) Save(ctx context.Context) (*ProcessedDonate, error) {
	return withHooks(ctx, pdc.sqlSave, pdc.mutation, pdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pdc *ProcessedDonateCreate) SaveX(ctx context.Context) *ProcessedDonate {
	v, err := pdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pdc *ProcessedDonateCreate) Exec(ctx context.Context) error {
	_, err := pdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdc *ProcessedDonateCreate) ExecX(ctx context.Context) {
	if err := pdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pdc *ProcessedDonateCreate) check() error {
	if _, ok := pdc.mutation.DisplayName(); !ok {
		return &ValidationError{Name: "display_name", err: errors.New(`ent: missing required field "ProcessedDonate.display_name"`)}
	}
	if _, ok := pdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProcessedDonate.created_at"`)}
	}
	if _, ok := pdc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "ProcessedDonate.amount"`)}
	}
	if _, ok := pdc.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`ent: missing required field "ProcessedDonate.currency"`)}
	}
	return nil
}

func (pdc *ProcessedDonateCreate) sqlSave(ctx context.Context) (*ProcessedDonate, error) {
	if err := pdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ProcessedDonate.ID type: %T", _spec.ID.Value)
		}
	}
	pdc.mutation.id = &_node.ID
	pdc.mutation.done = true
	return _node, nil
}

func (pdc *ProcessedDonateCreate) createSpec() (*ProcessedDonate, *sqlgraph.CreateSpec) {
	var (
		_node = &ProcessedDonate{config: pdc.config}
		_spec = sqlgraph.NewCreateSpec(processeddonate.Table, sqlgraph.NewFieldSpec(processeddonate.FieldID, field.TypeString))
	)
	if id, ok := pdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pdc.mutation.DisplayName(); ok {
		_spec.SetField(processeddonate.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := pdc.mutation.CreatedAt(); ok {
		_spec.SetField(processeddonate.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := pdc.mutation.Amount(); ok {
		_spec.SetField(processeddonate.FieldAmount, field.TypeInt64, value)
		_node.Amount = value
	}
	if value, ok := pdc.mutation.Currency(); ok {
		_spec.SetField(processeddonate.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	return _node, _spec
}

// ProcessedDonateCreateBulk is the builder for creating many ProcessedDonate entities in bulk.
type ProcessedDonateCreateBulk struct {
	config
	err      error
	builders []*ProcessedDonateCreate
}

// Save creates the ProcessedDonate entities in the database.
func (pdcb *ProcessedDonateCreateBulk) Save(ctx context.Context) ([]*ProcessedDonate, error) {
	if pdcb.err != nil {
		return nil, pdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pdcb.builders))
	nodes := make([]*ProcessedDonate, len(pdcb.builders))
	mutators := make([]Mutator, len(pdcb.builders))
	for i := range pdcb.builders {
		func(i int, root context.Context) {
			builder := pdcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProcessedDonateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pdcb *ProcessedDonateCreateBulk) SaveX(ctx context.Context) []*ProcessedDonate {
	v, err := pdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pdcb *ProcessedDonateCreateBulk) Exec(ctx context.Context) error {
	_, err := pdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdcb *ProcessedDonateCreateBulk) ExecX(ctx context.Context) {
	if err := pdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
