// Code generated by ent, DO NOT EDIT.

package ent

import (
	"DonateNotifier/ent/predicate"
	"DonateNotifier/ent/processeddonate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProcessedDonateUpdate is the builder for updating ProcessedDonate entities.
type ProcessedDonateUpdate struct {
	config
	hooks    []Hook
	mutation *ProcessedDonateMutation
}

// Where appends a list predicates to the ProcessedDonateUpdate builder.
func (pdu *ProcessedDonateUpdate) Where(ps ...predicate.ProcessedDonate) *ProcessedDonateUpdate {
	pdu.mutation.Where(ps...)
	return pdu
}

// SetDisplayName sets the "display_name" field.
func (pdu *ProcessedDonateUpdate) SetDisplayName(s string) *ProcessedDonateUpdate {
	pdu.mutation.SetDisplayName(s)
	return pdu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (pdu *ProcessedDonateUpdate) SetNillableDisplayName(s *string) *ProcessedDonateUpdate {
	if s != nil {
		pdu.SetDisplayName(*s)
	}
	return pdu
}

// SetCreatedAt sets the "created_at" field.
func (pdu *ProcessedDonateUpdate) SetCreatedAt(i int64) *ProcessedDonateUpdate {
	pdu.mutation.ResetCreatedAt()
	pdu.mutation.SetCreatedAt(i)
	return pdu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pdu *ProcessedDonateUpdate) SetNillableCreatedAt(i *int64) *ProcessedDonateUpdate {
	if i != nil {
		pdu.SetCreatedAt(*i)
	}
	return pdu
}

// AddCreatedAt adds i to the "created_at" field.
func (pdu *ProcessedDonateUpdate) AddCreatedAt(i int64) *ProcessedDonateUpdate {
	pdu.mutation.AddCreatedAt(i)
	return pdu
}

// SetAmount sets the "amount" field.
func (pdu *ProcessedDonateUpdate) SetAmount(i int64) *ProcessedDonateUpdate {
	pdu.mutation.ResetAmount()
	pdu.mutation.SetAmount(i)
	return pdu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (pdu *ProcessedDonateUpdate) SetNillableAmount(i *int64) *ProcessedDonateUpdate {
	if i != nil {
		pdu.SetAmount(*i)
	}
	return pdu
}

// AddAmount adds i to the "amount" field.
func (pdu *ProcessedDonateUpdate) AddAmount(i int64) *ProcessedDonateUpdate {
	pdu.mutation.AddAmount(i)
	return pdu
}

// SetCurrency sets the "currency" field.
func (pdu *ProcessedDonateUpdate) SetCurrency(s string) *ProcessedDonateUpdate {
	pdu.mutation.SetCurrency(s)
	return pdu
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (pdu *ProcessedDonateUpdate) SetNillableCurrency(s *string) *ProcessedDonateUpdate {
	if s != nil {
		pdu.SetCurrency(*s)
	}
	return pdu
}

// Mutation returns the ProcessedDonateMutation object of the builder.
func (pdu *ProcessedDonateUpdate) Mutation() *ProcessedDonateMutation {
	return pdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pdu *ProcessedDonateUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pdu.sqlSave, pdu.mutation, pdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pdu *ProcessedDonateUpdate) SaveX(ctx context.Context) int {
	affected, err := pdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pdu *ProcessedDonateUpdate) Exec(ctx context.Context) error {
	_, err := pdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdu *ProcessedDonateUpdate) ExecX(ctx context.Context) {
	if err := pdu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pdu *ProcessedDonateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(processeddonate.Table, processeddonate.Columns, sqlgraph.NewFieldSpec(processeddonate.FieldID, field.TypeString))
	if ps := pdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pdu.mutation.DisplayName(); ok {
		_spec.SetField(processeddonate.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := pdu.mutation.CreatedAt(); ok {
		_spec.SetField(processeddonate.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := pdu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(processeddonate.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := pdu.mutation.Amount(); ok {
		_spec.SetField(processeddonate.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := pdu.mutation.AddedAmount(); ok {
		_spec.AddField(processeddonate.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := pdu.mutation.Currency(); ok {
		_spec.SetField(processeddonate.FieldCurrency, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{processeddonate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pdu.mutation.done = true
	return n, nil
}

// ProcessedDonateUpdateOne is the builder for updating a single ProcessedDonate entity.
type ProcessedDonateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProcessedDonateMutation
}

// SetDisplayName sets the "display_name" field.
func (pduo *ProcessedDonateUpdateOne) SetDisplayName(s string) *ProcessedDonateUpdateOne {
	pduo.mutation.SetDisplayName(s)
	return pduo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (pduo *ProcessedDonateUpdateOne) SetNillableDisplayName(s *string) *ProcessedDonateUpdateOne {
	if s != nil {
		pduo.SetDisplayName(*s)
	}
	return pduo
}

// SetCreatedAt sets the "created_at" field.
func (pduo *ProcessedDonateUpdateOne) SetCreatedAt(i int64) *ProcessedDonateUpdateOne {
	pduo.mutation.ResetCreatedAt()
	pduo.mutation.SetCreatedAt(i)
	return pduo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pduo *ProcessedDonateUpdateOne) SetNillableCreatedAt(i *int64) *ProcessedDonateUpdateOne {
	if i != nil {
		pduo.SetCreatedAt(*i)
	}
	return pduo
}

// AddCreatedAt adds i to the "created_at" field.
func (pduo *ProcessedDonateUpdateOne) AddCreatedAt(i int64) *ProcessedDonateUpdateOne {
	pduo.mutation.AddCreatedAt(i)
	return pduo
}

// SetAmount sets the "amount" field.
func (pduo *ProcessedDonateUpdateOne) SetAmount(i int64) *ProcessedDonateUpdateOne {
	pduo.mutation.ResetAmount()
	pduo.mutation.SetAmount(i)
	return pduo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (pduo *ProcessedDonateUpdateOne) SetNillableAmount(i *int64) *ProcessedDonateUpdateOne {
	if i != nil {
		pduo.SetAmount(*i)
	}
	return pduo
}

// AddAmount adds i to the "amount" field.
func (pduo *ProcessedDonateUpdateOne) AddAmount(i int64) *ProcessedDonateUpdateOne {
	pduo.mutation.AddAmount(i)
	return pduo
}

// SetCurrency sets the "currency" field.
func (pduo *ProcessedDonateUpdateOne) SetCurrency(s string) *ProcessedDonateUpdateOne {
	pduo.mutation.SetCurrency(s)
	return pduo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (pduo *ProcessedDonateUpdateOne) SetNillableCurrency(s *string) *ProcessedDonateUpdateOne {
	if s != nil {
		pduo.SetCurrency(*s)
	}
	return pduo
}

// Mutation returns the ProcessedDonateMutation object of the builder.
func (pduo *ProcessedDonateUpdateOne) Mutation() *ProcessedDonateMutation {
	return pduo.mutation
}

// Where appends a list predicates to the ProcessedDonateUpdate builder.
func (pduo *ProcessedDonateUpdateOne) Where(ps ...predicate.ProcessedDonate) *ProcessedDonateUpdateOne {
	pduo.mutation.Where(ps...)
	return pduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pduo *ProcessedDonateUpdateOne) Select(field string, fields ...string) *ProcessedDonateUpdateOne {
	pduo.fields = append([]string{field}, fields...)
	return pduo
}

// Save executes the query and returns the updated ProcessedDonate entity.
func (pduo *ProcessedDonateUpdateOne) Save(ctx context.Context) (*ProcessedDonate, error) {
	return withHooks(ctx, pduo.sqlSave, pduo.mutation, pduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pduo *ProcessedDonateUpdateOne) SaveX(ctx context.Context) *ProcessedDonate {
	node, err := pduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pduo *ProcessedDonateUpdateOne) Exec(ctx context.Context) error {
	_, err := pduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pduo *ProcessedDonateUpdateOne) ExecX(ctx context.Context) {
	if err := pduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pduo *ProcessedDonateUpdateOne) sqlSave(ctx context.Context) (_node *ProcessedDonate, err error) {
	_spec := sqlgraph.NewUpdateSpec(processeddonate.Table, processeddonate.Columns, sqlgraph.NewFieldSpec(processeddonate.FieldID, field.TypeString))
	id, ok := pduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProcessedDonate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, processeddonate.FieldID)
		for _, f := range fields {
			if !processeddonate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != processeddonate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pduo.mutation.DisplayName(); ok {
		_spec.SetField(processeddonate.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := pduo.mutation.CreatedAt(); ok {
		_spec.SetField(processeddonate.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := pduo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(processeddonate.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := pduo.mutation.Amount(); ok {
		_spec.SetField(processeddonate.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := pduo.mutation.AddedAmount(); ok {
		_spec.AddField(processeddonate.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := pduo.mutation.Currency(); ok {
		_spec.SetField(processeddonate.FieldCurrency, field.TypeString, value)
	}
	_node = &ProcessedDonate{config: pduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{processeddonate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pduo.mutation.done = true
	return _node, nil
}
